name: Build & Deploy to Staging

on:
  workflow_dispatch:

env:
  ARTIFACT_NAME: StudioGhibliMM-dev
  ARTIFACT_PATH: build-artifact
  AWS_REGION: ${{ secrets.AWS_REGION }}
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  AWS_ECS_CLUSTER_NAME: Mycluster
  AWS_ECS_SERVICE_NAME: Myservice
  AWS_CF_NAME_MAIN: MyCloudFormationStack
  AWS_CF_TEMPLATE_MAIN: cloudformation/templates/main.yml
  TASK_DEF_FILE: cloudformation/templates/Task_def.yml
  DB_PASSWORD: ${{ secrets.AWS_SECRET_DB_PASSWORD_DEV }}
  FlaskEnv: development2

jobs:
  build:
    runs-on: ubuntu-latest
    environment: Staging

    steps:
      - name: Set Environment Variables
        run: |
          echo "Setting environment variables for build job..."
          echo "TASK_DEF_FILE=cloudformation/templates/Task_def.yml" >> $GITHUB_ENV
          echo "DB_PASSWORD=${{ secrets.AWS_SECRET_DB_PASSWORD_DEV }}" >> $GITHUB_ENV
  
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set Up AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ${{ env.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Check for CloudFormation Changes
        run: |
          echo "Checking for CloudFormation changes..."
          CHANGESET=$(aws cloudformation create-change-set \
            --stack-name ${{ env.AWS_CF_NAME_MAIN }} \
            --template-body file://${{ env.AWS_CF_TEMPLATE_MAIN }} \
            --change-set-name TempChangeSet \
            --capabilities CAPABILITY_NAMED_IAM \
            --query "Id" --output text || echo "NO_CHANGES")
          echo "ChangeSet Result: $CHANGESET"
          if [ "$CHANGESET" = "NO_CHANGES" ]; then
            echo "No changes detected. Skipping deployment."
            echo "SKIP_DEPLOY=true" >> $GITHUB_ENV
          else
            echo "Changes detected. Proceeding with deployment."
            echo "SKIP_DEPLOY=false" >> $GITHUB_ENV
          fi

      - name: Deploy CloudFormation Main
        if: ${{ env.SKIP_DEPLOY != 'true' }}
        uses: aws-actions/aws-cloudformation-github-deploy@v1.2.0
        with:
          name: ${{ env.AWS_CF_NAME_MAIN }}
          template: ${{ env.AWS_CF_TEMPLATE_MAIN }}
          capabilities: CAPABILITY_NAMED_IAM
          parameter-overrides: DBPassword=${{ secrets.AWS_SECRET_DB_PASSWORD_DEV }}

  deploy-task:
    name: Deploy ECS Service
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set Up AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Validate Exported Values
        run: |
          echo "Validating exported values from CloudFormation..."
          VPC_ID=$(aws cloudformation list-exports --query "Exports[?Name=='MyVPCID'].Value" --output text)
          TASK_EXEC_ROLE=$(aws cloudformation list-exports --query "Exports[?Name=='TaskExecutionRoleArn'].Value" --output text)
          PublicSubnetId=$(aws cloudformation list-exports --query "Exports[?Name=='PublicSubnetId'].Value" --output text)
          TASK_ROLE=$(aws cloudformation list-exports --query "Exports[?Name=='MyTaskExecutionRoleExportName'].Value" --output text)
          ECR_REPOSITORY=$(aws cloudformation list-exports --query "Exports[?Name=='ECRRepositoryURI'].Value" --output text)
          ECS_CLUSTER=$(aws cloudformation list-exports --query "Exports[?Name=='MyECSClusterName'].Value" --output text)
          DB_HOST=$(aws cloudformation list-exports --query "Exports[?Name=='RDSInstanceEndpoint'].Value" --output text)
          MySecurityGroup=$(aws cloudformation list-exports --query "Exports[?Name=='MySecurityGroup'].Value" --output text)

          # Validate values
          if [ -z "$VPC_ID" ] || [ -z "$TASK_EXEC_ROLE" ] || [ -z "$PublicSubnetId" ] || [ -z "$TASK_ROLE" ] || [ -z "$ECR_REPOSITORY" ] || [ -z "$ECS_CLUSTER" ] || [ -z "$DB_HOST" ]; then
            echo "One or more exported values are missing! Exiting..."
            exit 1
          fi

          # Export values to GITHUB_ENV
          echo "VPC_ID=$VPC_ID" >> $GITHUB_ENV
          echo "TASK_EXEC_ROLE=$TASK_EXEC_ROLE" >> $GITHUB_ENV
          echo "PublicSubnetId=$PublicSubnetId" >> $GITHUB_ENV
          echo "TASK_ROLE=$TASK_ROLE" >> $GITHUB_ENV
          echo "ECR_REPOSITORY=$ECR_REPOSITORY" >> $GITHUB_ENV
          echo "ECS_CLUSTER=$ECS_CLUSTER" >> $GITHUB_ENV
          echo "DB_HOST=$DB_HOST" >> $GITHUB_ENV
          echo "MySecurityGroup=$MySecurityGroup" >> $GITHUB_ENV

      - name: Convert YAML to JSON
        run: python3 cloudformation/templates/convert_yaml_to_json.py

      - name: Validate Task Definition JSON
        run: |
          echo "Validating Task_def.json structure..."
          jq empty Task_def.json || { echo "Invalid JSON structure"; exit 1; }
          cat Task_def.json

      - name: Register ECS Task Definition
        run: |
          echo "Registering ECS task definition..."
          aws ecs register-task-definition \
            --region ${{ secrets.AWS_REGION }} \
            --cli-input-json file://Task_def.json --debug || { echo "Error: Failed to register task definition"; exit 1; }

      - name: Update ECS Service
        run: |
          echo "Updating ECS Service..."
          TASK_DEFINITION_ARN=$(aws ecs describe-task-definition \
            --task-definition ${{ env.ARTIFACT_NAME }} \
            --query 'taskDefinition.taskDefinitionArn' --output text)
          aws ecs update-service \
            --cluster ${{ env.AWS_ECS_CLUSTER_NAME }} \
            --service ${{ env.AWS_ECS_SERVICE_NAME }} \
            --task-definition $TASK_DEFINITION_ARN