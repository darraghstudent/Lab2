name: Build & Deploy to Staging

on:
  workflow_dispatch:


env:
  ARTIFACT_NAME: StudioGhibliMM-dev
  ARTIFACT_PATH: build-artifact
  AWS_REGION: ${{ secrets.AWS_REGION }}
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  AWS_CF_NAME_MAIN: MyCloudFormationStack
  AWS_CF_TEMPLATE_MAIN: cloudformation/templates/main.yml 
  TASK_DEF_FILE: cloudformation/templates/Task_def.yml

  DB_PASSWORD: ${{ secrets.AWS_SECRET_DB_PASSWORD_DEV }}



jobs:
  build:
    runs-on: ubuntu-latest
    environment: Staging
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # https://github.com/aws-actions/configure-aws-credentials
      - name: Set Up AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ${{ env.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}


      - name: Check for CloudFormation Changes
        run: |
          echo "Checking for CloudFormation changes..."
          CHANGESET=$(aws cloudformation create-change-set \
            --stack-name ${{ env.AWS_CF_NAME_MAIN }} \
            --template-body file://${{ env.AWS_CF_TEMPLATE_MAIN }} \
            --change-set-name TempChangeSet \
            --capabilities CAPABILITY_NAMED_IAM \
            --query "Id" --output text || echo "NO_CHANGES")

          echo "ChangeSet Result: $CHANGESET"

          if [ "$CHANGESET" = "NO_CHANGES" ]; then
            echo "No changes detected. Skipping deployment."
            echo "SKIP_DEPLOY=true" >> $GITHUB_ENV
          else
            echo "Changes detected. Proceeding with deployment."
            echo "SKIP_DEPLOY=false" >> $GITHUB_ENV
          fi
          exit 0
          
      - name: Deploy CloudFormation Main
        if: env.SKIP_DEPLOY != 'true'
        uses: aws-actions/aws-cloudformation-github-deploy@v1.2.0
        with:
          name: ${{ env.AWS_CF_NAME_MAIN }}
          template: ${{ env.AWS_CF_TEMPLATE_MAIN }}
          capabilities: CAPABILITY_NAMED_IAM
          parameter-overrides: DBPassword=${{ secrets.AWS_SECRET_DB_PASSWORD_DEV }}

      
  deploy-task:
    name: Deploy ECS Service
    runs-on: ubuntu-latest
    steps:
      - name: Set Up AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
    
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Install_Python
        run: | 
          sudo apt update
          sudo apt install python3

      - name: Debug Workspace and File Paths
        run: |
          echo "Current working directory:"
          pwd
          echo "Listing files in the workspace:"
          ls -la
          echo "Listing files in cloudformation/templates:"
          ls -la cloudformation/templates




      - name: Convert YAML to JSON
        run: |
          python -c "import yaml, json, sys; print(json.dumps(yaml.safe_load(open('${{ env.TASK_DEF_FILE }}'))))" > Task_def.json
      
      # Deploy Task Definition
      - name: Deploy Task Definition
        run: |
          aws ecs register-task-definition \
            --cli-input-json file://Task_def.json

      # Update ECS Service
      - name: Update ECS Service
        if: env.SKIP_DEPLOY == 'false'
        run: |
          echo "Registering new Task Definition revision..."
          TASK_DEFINITION_ARN=$(aws ecs register-task-definition \
            --cli-input-json file://Task_def.json \
            --query "taskDefinition.taskDefinitionArn" --output text)

          echo "Updating ECS Service to use new Task Definition..."
          aws ecs update-service \
            --cluster MyClusterName \
            --service MyServiceName \
            --task-definition $TASK_DEFINITION_ARN \
            --force-new-deployment
